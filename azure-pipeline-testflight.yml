# TestFlight Deployment Pipeline with Auto-Version Management
name: TestFlight-Deploy-$(Date:yyyyMMdd)-$(Rev:r)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - build/*
      - businesscard/*

pr: none

pool:
  vmImage: 'macOS-latest'

variables:
  - name: bundleId
    value: 'com.gleidsonlm.businesscard'
  - name: appName
    value: 'Business Card'
  - name: buildPath
    value: '$(Build.SourcesDirectory)/build'

stages:
  # STAGE 1: Version Management (NEW)
  - stage: VersionManagement
    displayName: 'Manage App Version'
    jobs:
      - job: UpdateVersion
        displayName: 'Auto-Increment Bundle Version'
        steps:
          - checkout: self
            persistCredentials: true
            displayName: 'Checkout with Write Permissions'

          - task: Bash@3
            displayName: 'Create Scripts Directory'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p scripts
                echo "Scripts directory created"

          - task: Bash@3
            displayName: 'Auto-Increment Bundle Version'
            name: versionUpdate
            inputs:
              targetType: 'filePath'
              filePath: 'scripts/increment-version.sh'
              workingDirectory: '$(Build.SourcesDirectory)'

          - task: Bash@3
            displayName: 'Commit Version Update'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                set -e
                
                echo "=== Committing Version Update ==="
                
                # Configure git
                git config user.email "azure-pipeline@gleidsonlm.com"
                git config user.name "Azure Pipeline Bot"
                
                # Check if there are changes to commit
                if git diff --quiet businesscard/Info.plist; then
                  echo "‚ÑπÔ∏è No version changes to commit"
                else
                  echo "üìù Committing version update..."
                  
                  # Get new version for commit message
                  NEW_VERSION=$(versionUpdate.newBundleVersion)
                  CURRENT_APP_VERSION=$(versionUpdate.currentAppVersion)
                  
                  git add businesscard/Info.plist
                  git commit -m "chore: Auto-increment bundle version to $NEW_VERSION
                  
                  - App Version: $CURRENT_APP_VERSION
                  - Bundle Version: $NEW_VERSION
                  - Automated by: Azure Pipeline
                  - Timestamp: $(date '+%Y-%m-%d %H:%M:%S UTC')
                  
                  This ensures TestFlight upload compatibility."
                  
                  git push origin main
                  echo "‚úÖ Version update committed and pushed"
                fi

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Updated Source'
            inputs:
              targetPath: '$(Build.SourcesDirectory)'
              artifactName: 'updated-source'
              publishLocation: 'pipeline'

  # STAGE 2: Validate and Prepare IPA (UPDATED)
  - stage: ValidateIPA
    displayName: 'Validate Build Artifacts'
    dependsOn: VersionManagement
    jobs:
      - job: ValidateBuildArtifacts
        displayName: 'Validate IPA and Build Files'
        variables:
          newBundleVersion: $[ stageDependencies.VersionManagement.UpdateVersion.outputs['versionUpdate.newBundleVersion'] ]
          currentAppVersion: $[ stageDependencies.VersionManagement.UpdateVersion.outputs['versionUpdate.currentAppVersion'] ]
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Updated Source'
            inputs:
              artifactName: 'updated-source'
              targetPath: '$(Build.SourcesDirectory)'

          - task: Bash@3
            displayName: 'Validate IPA Against New Version'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                set -e
                
                echo "=== Build Artifact Validation ==="
                echo "Expected Bundle Version: $(newBundleVersion)"
                echo "Current App Version: $(currentAppVersion)"
                echo "Build path: $(buildPath)"
                
                # Check if build folder exists
                if [ ! -d "$(buildPath)" ]; then
                  echo "‚ùå Build folder not found at $(buildPath)"
                  echo "‚ö†Ô∏è You need to rebuild the IPA with the new bundle version"
                  
                  echo "üîß Manual Steps Required:"
                  echo "1. Open Xcode and clean build folder (Product ‚Üí Clean Build Folder)"
                  echo "2. Archive the project (Product ‚Üí Archive)"
                  echo "3. Export IPA for distribution to build/ folder"
                  echo "4. Commit and push the new IPA"
                  echo "5. Re-run this pipeline"
                  
                  exit 1
                fi
                
                # Find IPA file
                IPA_FILE=$(find "$(buildPath)" -name "*.ipa" -type f | head -1)
                
                if [ -z "$IPA_FILE" ]; then
                  echo "‚ùå No IPA file found in build folder"
                  echo "‚ö†Ô∏è Please rebuild and export IPA with new bundle version $(newBundleVersion)"
                  exit 1
                fi
                
                echo "‚úÖ Found IPA: $IPA_FILE"
                
                # Extract and validate bundle version in IPA
                echo "=== IPA Bundle Version Validation ==="
                TEMP_DIR=$(mktemp -d)
                cd "$TEMP_DIR"
                unzip -q "$IPA_FILE"
                
                APP_BUNDLE=$(find . -name "*.app" -type d | head -1)
                if [ -n "$APP_BUNDLE" ]; then
                  INFO_PLIST="$APP_BUNDLE/Info.plist"
                  if [ -f "$INFO_PLIST" ]; then
                    IPA_BUNDLE_VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$INFO_PLIST" 2>/dev/null || echo "unknown")
                    IPA_APP_VERSION=$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$INFO_PLIST" 2>/dev/null || echo "unknown")
                    
                    echo "üì± IPA Bundle Version: $IPA_BUNDLE_VERSION"
                    echo "üì± IPA App Version: $IPA_APP_VERSION"
                    
                    # Check if IPA has the correct new version
                    if [ "$IPA_BUNDLE_VERSION" = "$(newBundleVersion)" ]; then
                      echo "‚úÖ IPA has correct bundle version!"
                    else
                      echo "‚ùå IPA bundle version mismatch!"
                      echo "Expected: $(newBundleVersion)"
                      echo "Found in IPA: $IPA_BUNDLE_VERSION"
                      echo ""
                      echo "üîß Action Required:"
                      echo "1. The pipeline updated your Info.plist to version $(newBundleVersion)"
                      echo "2. You need to rebuild the IPA with this new version"
                      echo "3. Export the new IPA to the build/ folder"
                      echo "4. Commit and push the updated IPA"
                      echo "5. Re-run this pipeline"
                      
                      # Clean up
                      rm -rf "$TEMP_DIR"
                      exit 1
                    fi
                  fi
                fi
                
                # Clean up
                rm -rf "$TEMP_DIR"
                
                # Copy IPA to staging for deployment
                mkdir -p "$(Build.ArtifactStagingDirectory)"
                cp "$IPA_FILE" "$(Build.ArtifactStagingDirectory)/businesscard.ipa"
                
                echo "‚úÖ IPA validation passed - ready for TestFlight upload"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Validated IPA'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/businesscard.ipa'
              artifactName: 'testflight-ipa'
              publishLocation: 'pipeline'

  # STAGE 3: Deploy to TestFlight (EXISTING - Updated)
  - stage: DeployTestFlight
    displayName: 'Deploy to TestFlight'
    dependsOn: 
      - VersionManagement
      - ValidateIPA
    condition: succeeded()
    variables:
      newBundleVersion: $[ stageDependencies.VersionManagement.UpdateVersion.outputs['versionUpdate.newBundleVersion'] ]
      currentAppVersion: $[ stageDependencies.VersionManagement.UpdateVersion.outputs['versionUpdate.currentAppVersion'] ]
    jobs:
      - deployment: TestFlightRelease
        displayName: 'TestFlight Release'
        environment: 'TestFlight-Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download IPA for Release'
                  inputs:
                    artifactName: 'testflight-ipa'
                    targetPath: '$(Pipeline.Workspace)/release'

                - task: Bash@3
                  displayName: 'Pre-Release Summary'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "=== TestFlight Release Summary ==="
                      echo "üì± App: Business Card"
                      echo "üÜî Bundle ID: $(bundleId)"
                      echo "üìä App Version: $(currentAppVersion)"
                      echo "üèóÔ∏è Bundle Version: $(newBundleVersion)"
                      echo "üì¶ IPA: $(Pipeline.Workspace)/release/businesscard.ipa"
                      echo "‚è∞ Release Time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
                      echo ""
                      echo "This build will be uploaded to TestFlight with bundle version $(newBundleVersion)"
                      echo "Previous App Store Connect version was: 4"
                      echo "New version $(newBundleVersion) > 4 ‚úÖ"

                - task: AppStoreRelease@1
                  displayName: 'Upload to TestFlight'
                  inputs:
                    serviceEndpoint: 'AppStore-BusinessCard-TestFlight'
                    applicationIdentifier: '$(bundleId)'
                    appSpecificId: ''
                    appType: 'iOS'
                    ipaPath: '$(Pipeline.Workspace)/release/businesscard.ipa'
                    releaseTrack: 'TestFlight'
                    releaseNotes: |
                      Business Card App - Build $(newBundleVersion)
                      
                      üìÖ Release Date: $(Build.BuildNumber)
                      üî¢ App Version: $(currentAppVersion)
                      üèóÔ∏è Bundle Version: $(newBundleVersion)
                      
                      ‚ú® Features:
                      - Create and share business cards as vCard
                      - Generate QR codes for easy sharing
                      - Protected with Appdome security
                      
                      üß™ Testing Notes:
                      - Test vCard export functionality
                      - Verify QR code generation
                      - Check sharing capabilities
                      
                      üìù Feedback: Please report issues via TestFlight feedback or GitHub issues
                    shouldSkipWaitingForProcessing: false
                    shouldSkipSubmission: false
                    teamId: ''
                    teamName: ''
                    shouldInstallFastlane: true
                    fastlaneVersionChoice: 'LatestVersion'

                - task: Bash@3
                  displayName: 'Post-Release Success Summary'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "=== TestFlight Upload Successful! ==="
                      echo "‚úÖ Business Card app uploaded to TestFlight"
                      echo "üì± Bundle ID: $(bundleId)"
                      echo "üìä App Version: $(currentAppVersion)"
                      echo "üèóÔ∏è Bundle Version: $(newBundleVersion)"
                      echo "üè∑Ô∏è Release Track: TestFlight"
                      echo "‚è∞ Completed: $(date '+%Y-%m-%d %H:%M:%S UTC')"
                      echo ""
                      echo "üìã Next Steps:"
                      echo "1. ‚úÖ Check App Store Connect for processing status"
                      echo "2. ‚úÖ Add internal testers when processing completes"
                      echo "3. ‚úÖ Distribute build to testers"
                      echo "4. ‚úÖ Collect feedback and iterate"
                      echo ""
                      echo "üîó Links:"
                      echo "‚Ä¢ App Store Connect: https://appstoreconnect.apple.com/"
                      echo "‚Ä¢ TestFlight: https://appstoreconnect.apple.com/apps/$(bundleId)/testflight"
                      echo "‚Ä¢ GitHub Repository: https://github.com/gleidsonlm/ios_business_card"